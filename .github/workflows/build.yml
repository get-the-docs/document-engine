name: Build

on:
  push:
    branches: [ "main", release/*, story/*, task/* ]
    paths:
      - 'docs-*/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    #    branches: [ "main" ]
    types: [opened, synchronize, reopened]
    paths:
      - 'docs-*/**'
      - 'pom.xml'
  workflow_dispatch:

env:
  API_DOCKER_REGISTRY: ghcr.io
  API_DOCKER_IMAGE_NAME: ${{ github.repository_owner }}/docs-generator-api

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  build_job:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Rebuild local Maven repository from cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/net/videki/**
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven build
        run: mvn -B package --file pom.xml -DskipTests=true

  test_job:
    name: Run tests
    needs: build_job
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Rebuild local Maven repository from cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/net/videki/**
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Prepare test environment
        env:
          repository.template.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.template.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.template.provider.aws.s3.prefix: 'testfiles/templates'

          repository.documentstructure.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.documentstructure.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.documentstructure.provider.aws.s3.prefix: 'testfiles/docstructures'

          repository.result.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.result.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.result.provider.aws.s3.prefix: 'testfiles/results'

      - name: Maven verify
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: mvn -B verify --file pom.xml -Dspring.profiles.active=local

#      - name: Test Reporting
#        uses: phoenix-actions/test-reporting@v10
#        with:
#          name: JUnit tests
#          path: ${{ github.workspace }}/**/target/surefire-reports/TEST-*.xml
#          reporter: java-junit
#          fail-on-error: true

  coverage_job:
    name: Coverage check
    needs:
      - build_job
      - test_job
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Rebuild local Maven repository from cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/net/videki/**
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Prepare test environment
        env:
          repository.template.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.template.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.template.provider.aws.s3.prefix: 'testfiles/templates'

          repository.documentstructure.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.documentstructure.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.documentstructure.provider.aws.s3.prefix: 'testfiles/docstructures'

          repository.result.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.result.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.result.provider.aws.s3.prefix: 'testfiles/results'

      - name: Maven verify
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: mvn -B verify --file pom.xml -Dspring.profiles.active=local -Pcoverage

      - name: Run Clover coverage and upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: document-engine
      #    token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
      #    files: ./coverage1.xml,./coverage2.xml # optional
      #    flags: unittests # optional
      #    fail_ci_if_error: true # optional (default = false)
      #    verbose: true # optional (default = false)

      - name: Codecov upload
        run: bash <(curl -s https://codecov.io/bash)

#      - name: Archive test results
#        if: ${{ success() }}
#        uses: actions/upload-artifact@v3
#        with:
#          name: Coverage results
#          path: ${{ github.workspace }}/**/docs-api/target/site/clover/
#          retention-days: 30


  analyze_job:
    name: Code analysis
    needs:
      - build_job
      - test_job
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare test environment
        env:
          repository.template.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.template.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.template.provider.aws.s3.prefix: 'testfiles/templates'

          repository.documentstructure.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.documentstructure.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.documentstructure.provider.aws.s3.prefix: 'testfiles/docstructures'

          repository.result.provider.aws.s3.bucketname: ${{ secrets.TEST_AWS_BUCKETNAME }}
          repository.result.provider.aws.s3.region: ${{ secrets.TEST_AWS_REGION }}
          repository.result.provider.aws.s3.prefix: 'testfiles/results'

      - name: Run Sonarcloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: mvn -B -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=get-the-docs_template-utils -Dspring.profiles.active=local -Psonar

#      - name: Archive production artifacts
#        if: ${{ success() }}
#        uses: actions/upload-artifact@v1
#        with:
#          name: docs-core
#          path: /home/runner/work/document-engine/document-engine/docs-core/target/docs-core-1.0.1.jar
#          path: ${{ github.workspace }}/**/target/docs*.jar


  docker_build_job:
    name: Containerize
    needs:
      - analyze_job
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Rebuild local Maven repository from cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/net/videki/**
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven build
        run: mvn -B package --file pom.xml -DskipTests=true

#      - name: Build the Docker image
#        working-directory: ./docs-generator-api
#        run: docker build -t ${{ env.API_DOCKER_REGISTRY }}/${{ env.API_DOCKER_IMAGE_NAME }} --file Dockerfile .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.API_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.API_DOCKER_REGISTRY }}/${{ env.API_DOCKER_IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./docs-generator-api
          push: true
#          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Pull back the Docker image for the Trivy scan
        working-directory: ./docs-generator-api
        run: docker pull ${{ steps.meta.outputs.tags }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: '${{ steps.meta.outputs.tags }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

